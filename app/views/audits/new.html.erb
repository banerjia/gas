<%- if audit.errors.count > 0 -%>
<div id="error_explanation">
	<h2><%= pluralize(audit.errors.count, "error") %> prohibited this store from being saved:</h2>
	<ul>
		<% audit.errors.full_messages.each do |msg| %>
		<li><%= msg %></li>
		<% end %>
	</ul>
</div>
<% end -%>

<%= form_for audit, data: {"ng-app" => "audit"}, role: "form" do |f| -%>
<div class="row" style="margin-bottom: 0.5em">
	<%= f.submit "Save", :disable_with => 'Saving...', class: "btn btn-primary btn-wide", data: {"ng-disabled" => "audit_store_id == null"} -%>
	
	<button class="btn btn-default btn-wide" type="button">Cancel</button>
</div>


<div class="row container" id="auditEntryForm">
	<div class="row">	
		<div class="panel panel-default">
			<div class="panel-heading"><strong>Basic Audit Information</strong></div>
			<div class="panel-body container">
					<div class="row">
						<%= f.fields_for :store do |sf| -%>
							<div 
							class="ng-cloak col-md-12 col-sm-12 col-xs-12" 
							data-ng-controller="StoreController" 
							data-ng-init="init(<%= sf.object.id || 0 -%>,'<%= sf.object.full_name -%>', '<%= sf.object.address -%>')">
								<div class="form-group">
									<%= f.label :created_at, "Audit Date" -%>
									<%= f.text_field :created_at, class: 'date_picker form-control' -%>
								</div>
								<div class="form-group">
									<%= f.label :person_id, "Auditor" -%>
									<%= f.text_field :person_id, class: 'form-control' -%>
								</div>
								<div class="form-group">
									<span style="text-transform:uppercase">{{full_name}}</span>
									<address>{{address}}</address>

									<%= sf.label :store_number, "Store Number" -%>
									<%= sf.text_field :store_number, class: "form-control", style: "width: 25em", data: {"ng-model" => "store_number"} -%>							
									
									<%= sf.hidden_field :id, data: {"ng-value" => "store_id"} %>
								</div>													
							</div>
						<%- end -%>
					</div>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="panel panel-default">
			<div class="panel-heading"><strong>Store Search</strong></div>
			<div class="panel-body">
				<div class="container" data-ng-controller="StoreSearchController">
					<div class="row">
						<div class="col-md-6 col-sm-12 col-xs-12">
							<p>							 
							<input type="search" data-ng-model="query_string" class="form-control" placeholder="Store search"/>
							</p>
							<p><label>Stores within</label> <br/><%= select_tag :store_range, 
									options_for_select([['1 mile', '1mi'], ['5 miles', '5mi'], ['10 miles', '10mi']]), 
									prompt: "any distance", 
									data: {"ng-model" => "dist"}, 
									class: "form-control", 
										style: "max-width: 15em; display: inline-block" -%></p>
							<p class="ng-cloak" data-ng-show="dist!= null && dist.length > 0">
								<label>From</label><br/> 
								<%= select_tag :from_address, options_for_select([["Specific address", 1]]),
								prompt: "my current location",
								data: {"ng-model" => "locationPoint"}, 
								class: "form-control", 
									style: "max-width: 15em; display: inline-block" -%>
							
								<span data-ng-show="locationPoint == '1'">
									<%= text_field_tag :ref_address, 
									nil, 
									data: {"ng-model" => "ref_address"}, 
									class: "form-control", style: "max-width: 15em; display: inline-block", 
										placeholder: "City, State OR Zip" -%>
									</span>
							
							</p>

							<button type="button" class="btn btn-primary" data-ng-click="getStores()">Search</button>
							<button type="button" class="btn btn-default" data-ng-show="audit_store_id != null" data-ng-click="store_search=false">Cancel</button>
						</div>			
						<div class="col-md-5 col-md-offset-1 col-sm-12 col-xs-12">								
							<p class="ng-cloak alert alert-warning loading" data-ng-show="loading">{{loading_message}}</p>
							<table class="ng-cloak table table-condensed" style="width: 99%" data-ng-show="stores.length > 0">
								<thead>
									<tr>
										<th scope="col" style="width: 60%">Store</th>
										<td>
										<div data-ng-show="current_page > 1 || more_pages" class="btn-toolbar pull-right" role="toolbar">
											<div class="btn-group" role="group">			
												<button type="button" data-ng-click="previousPage()" data-ng-disabled="current_page <= 1" class="ng-cloak btn btn-sm btn-default"> <i class="fa fa-chevron-left"></i> <span class="hidden-sm hidden-xs">Back</span></button> 					
												<button type="button" data-ng-click="nextPage()" class="ng-cloak btn btn-sm btn-default" data-ng-disabled="!more_pages"><span class="hidden-sm hidden-xs">Next</span> <i class="fa fa-chevron-right"></i></button> 
											</div>
										</div>
										</td>
									</tr>
								</thead>
								<tbody>
									<tr data-ng-repeat="store in stores">
										<td >
											<span style="text-transform:uppercase">{{store.full_name}}</span>
											<address style="margin:0 0 0 0.3em;padding:0.1em">{{store.address}}</address> 
											<em data-ng-show="store.distance">({{store.distance.toFixed(1)}} miles)</em>
											
										</td>
										<td>
											<button type="button" data-ng-click="selectStore(store); store_search=false;" class="btn btn-success pull-right">Select</button>
										</td>
									</tr>
								</tbody>
							</table>
						</div>												
					</div>
				</div>
			</div>
		</div>
	</div>
	<%-	metric_index = 0 -%>
	<%= f.fields_for :audit_metrics do |a_m| -%>

	<div style="display:none">
		<%= a_m.hidden_field :metric_id -%>
		<%= a_m.hidden_field :score_type, value: metrics[metric_index][:score_type] -%>
	</div>

	<div 
		class="row ng-cloak" 
		data-ng-show="audit_store_id != null" 
		data-ng-controller="AuditMetricController" 
		data-ng-init="init(
				'<%= metrics[metric_index][:response_type] -%>', 
				'<%= metrics[metric_index][:score_type] -%>', 
				<%= metric_index -%>, 
				{
					base: <%= a_m.object[:base]  || 0-%>,
					bonus: <%= a_m.object[:bonus]  || 0-%>,
					loss: <%= a_m.object[:loss]  || 0-%>
				})
		">

		<%- assigned_score_field = nil
			case metrics[metric_index][:score_type] 
			when "base"
				assigned_score_field = :base
			when "bonus"
				assigned_score_field = :bonus
			when "loss"
				assigned_score_field = :loss
			end
		-%>
		<div class="panel panel-sm panel-default">
			<div class="panel-heading">
				<div class="row">
					<div class="col-md-10 col-sm-10 col-xs-10"><strong><%= metrics[metric_index][:title].html_safe -%></strong></div>
					<div class="col-md-2 col-sm-2 col-xs-2 text-right ng-cloak">
						<span class="label label-success" data-ng-show="computedBaseScore > 0">{{computedBaseScore}}</span>
						<span class="label label-danger" data-ng-show="computedLossScore < 0">{{computedLossScore * -1}}</span>
						<span class="label label-primary" data-ng-show="computedBonusScore > 0">{{computedBonusScore}}</span>
					</div>
				</div>
			</div>
			<div class="panel-body">
				<div class="row">
					<%- if metrics[metric_index][:response_type] == 'textarea' -%>
					<div class="col-md-12 col-sm-12 col-xs-12">
						<%- if !metrics[metric_index][:description].blank? -%>
						<p><%= metrics[metric_index][:description].html_safe -%></p>
						<%- end -%>						
					</div>
					<div class="col-md-12 col-sm-12 col-xs-12">
						<%= a_m.hidden_field :base, value: 0 -%>
						<%=	a_m.fields_for :audit_metric_responses, include_id: false do |a_m_r| -%>
						<div style="display:none">							
							<%= a_m_r.hidden_field :metric_option_id -%>
							<%= a_m_r.hidden_field :selected, value: "1" -%>
						</div>
						<%= a_m_r.text_area :entry_value, cols: 80, rows: 5, class: "form-control" -%>
						<% end -%>
					</div>
					<%- else -%>
					<div class="col-md-12 col-sm-12 col-xs-12">
						<%- if !metrics[metric_index][:description].blank? -%>
						<p><%= metrics[metric_index][:description].html_safe -%></p>
						<%- end -%>	
						<div class="container">
							<div class="row">
								<%- case metrics[metric_index][:response_type] -%>
								<%- when 'radio' -%>
								<%- metric_option_index = 0 -%>																		
								<%= a_m.fields_for :audit_metric_responses, include_id: false do |a_m_r| -%>
								<div style="display:none">		
									<!-- Value added to maintain model consistency					 -->
									<%= a_m_r.hidden_field :metric_option_id -%>
									<%= a_m_r.hidden_field :entry_value, value: metrics[metric_index].metric_options[metric_option_index][:points] -%>
									<%= a_m_r.hidden_field :selected, data: {"ng-value" => "(score == #{metrics[metric_index].metric_options[metric_option_index][:points]} ? 1: 0)"} -%>
								</div>									
								<div class="col-md-4 col-sm-12 col-xs-12">
									<div class="input-group">
										<span class="input-group-addon">
											<%= a_m.radio_button assigned_score_field, metrics[metric_index].metric_options[metric_option_index][:points], data: {"ng-model" => "score", "ng-init" => "score = #{a_m.object[assigned_score_field]}", "ng-change" => "calculateScore()"} -%>
										</span>
										<%= a_m.label assigned_score_field, metrics[metric_index].metric_options[metric_option_index][:label], value: metrics[metric_index].metric_options[metric_option_index][:points], class: "form-control" -%>
									</div>

									<%-  metric_option_index = metric_option_index + 1 -%>
								</div>
								<%- end -%>
								<%- when 'text_compare' -%>
								<%= a_m.hidden_field assigned_score_field, data: {"ng-value" => "computed#{assigned_score_field.to_s.capitalize}Score"} -%>
								<%- metric_option_index = 0 -%>
								<%= a_m.fields_for :audit_metric_responses, include_id: false do |a_m_r| -%>
								<div class="col-md-4 col-sm-12 col-xs-12">									
									<%= a_m_r.hidden_field :selected, value: "1" -%>
									<%= a_m_r.label :entry_value, metrics[metric_index].metric_options[metric_option_index][:label] -%>
									<%= a_m_r.text_field :entry_value, type: 'number', value: 0, min: 0,class: "form-control input-sm", data: { "ng-model" => "entry_values[#{metric_option_index}]", "ng-change" => "calculateScore()", "ng-init" => "entry_values[#{metric_option_index}] = #{a_m_r.object[:entry_value] || 0}; entry_value_weights[#{metric_option_index}] = #{metrics[metric_index].metric_options[metric_option_index][:weight]}; entry_value_scores[#{metric_option_index}] = #{metrics[metric_index].metric_options[metric_option_index][:points]}"} -%>
									<%= a_m_r.hidden_field :metric_option_id -%>	
								</div>
								<%- metric_option_index = metric_option_index + 1 -%>								
								<%- end -%>
								<%- when 'custom_shelves' -%>	
								<div style="display:none">								
									<%= a_m.hidden_field :bonus, data: {"ng-model" => "computedBonusScore"} -%>
									<%= a_m.hidden_field :loss, data: {"ng-model" => "computedLossScore"} -%>
									<%= a_m.hidden_field :base, data: {"ng-model" => "computedBaseScore"} -%>
								</div>
								<%- metric_option_index = 0 -%>
								<%= a_m.fields_for :audit_metric_responses, include_id: false do |a_m_r| -%>
								<div style="display:none">							
									<%= a_m_r.hidden_field :metric_option_id -%>
									<%= a_m_r.hidden_field :entry_value, value: metrics[metric_index].metric_options[metric_option_index][:label] -%>
								</div>
								<div class="col-md-4 col-sm-12 col-xs-12 text-nowrap">
									<div class="input-group">
										<span class="input-group-addon">
											<%= a_m_r.check_box :selected, data:{ 
												"ng-model" => "entry_values[#{metric_option_index}]", 
												"ng-change" => "calculateScore()",
												"ng-init" =>  
												"entry_values[#{metric_option_index}] = #{a_m_r.object[:selected] || false};
												entry_value_scoreTypes[#{metric_option_index}] = '#{ metrics[metric_index].metric_options[metric_option_index][:isBonus] ? 'bonus': ( metrics[metric_index].metric_options[metric_option_index][:points] < 0 ? 'loss' : 'base' ) }';
												entry_value_scores[#{metric_option_index}] = #{metrics[metric_index].metric_options[metric_option_index][:points]}; 
												entry_value_weights[#{metric_option_index}] = #{metrics[metric_index].metric_options[metric_option_index][:weight]}"										
											}-%>

										</span>
										<%= a_m_r.label :selected, metrics[metric_index].metric_options[metric_option_index][:label], class: "form-control input-sm" -%>
									</div>
								</div>
								
								<%- metric_option_index = metric_option_index + 1 -%>	
								<%- end -%>	
								<%- when 'computed' -%>
								<%= a_m.hidden_field assigned_score_field, data: {"ng-value" => "computed#{assigned_score_field.to_s.capitalize}Score"} -%>
								<%= a_m.fields_for :audit_metric_responses, include_id: false do |a_m_r| -%>
								<%= a_m_r.hidden_field :metric_option_id -%>
								<%= a_m_r.hidden_field :selected, value: "1" -%>
								<%= a_m_r.number_field :entry_value, min: 0, class: "form-control input-sm", data: {"ng-model" => "entry_value", "ng-init" => "entry_value = #{a_m_r.object[:entry_value] || 0};quantifier = #{metrics[metric_index].metric_options.first[:points]}", "ng-change" => "calculateScore()"} -%>
								<% end -%>


								<%- end -%> <!-- CASE END -->
							</div>
							<div class="row">
								<p data-ng-show="computedLossScore < 0" class="ng-hide checkbox-inline ng-cloak">
									<%= a_m.check_box :needs_resolution -%>
									<%= a_m.label :needs_resolution, "This issue has been resolved" -%>
								</p>
							</div>
						</div> 
					</div>
					<%- end -%>
				</div>
			</div>
		</div>
	</div>

	<%- metric_index = metric_index + 1 -%>
	<%- end -%>

	<div class="row ng-cloak" style="padding:0"
			data-ng-show="audit_store_id != null"  
			data-ng-controller="AuditController" 
			data-ng-init="init({base: <%= f.object[:base] -%>,loss: <%= f.object[:loss] -%>,bonus: <%= f.object[:bonus] -%>})">
		<div style="display:none">
			<%= f.hidden_field :base, data: { "ng-value" => "baseScore"} -%>
			<%= f.hidden_field :loss, data: { "ng-value" => "lossScore"} -%>
			<%= f.hidden_field :bonus, data: { "ng-value" => "bonusScore"} -%>			
			<%= f.hidden_field :person_id, value: 1 -%>
			<%= f.hidden_field :store_id, data: {"ng-model" => "store_id"} -%>
		</div>
		<div class="col-md-3 col-md-push-9 col-sm-12 col-xs-12" style="padding:0">
			<div class="panel panel-primary">
				<div class="panel-heading">Score</div>
				<div class="panel-body">
					<ul class="list-group ng-cloak">
						<li class="list-group-item primary"><span>Base</span><span class="pull-right">{{baseScore}}</span></li>
						<li class="list-group-item danger"><span>Loss</span><span class="pull-right">{{lossScore}}</span></li>
						<li class="list-group-item success"><span>Bonus</span><span class="pull-right">{{bonusScore}}</span></li>
						<li class="list-group-item"><strong><span>Total</span><span class="pull-right">{{baseScore + lossScore + bonusScore}}</span></strong></li>
					</ul>					
				</div>
			</div>
		</div>
		<div class="col-md-8 col-md-pull-3 col-sm-12 col-xs-12" style="padding: 0">
			<div class="panel panel-default">
				<div class="panel-heading"><%= f.label :audit_comment, "Comments" -%></div>
				<div class="panel-body">
					<p>[Some description of how scoring is related to comments]</p>
					<%= f.fields_for :comments, include_id: false do |c| -%>

					<%= c.text_area :content, class: "form-control", cols: 80, rows: 5 -%>
					<%- end -%>
				</div>
			</div>
		</div>
	</div>

	<div class="row ng-cloak" data-ng-controller="AuditImageController" data-ng-show=""audit_store_id != null"">
		<div class="panel panel-default">
			<div class="panel-heading">Attach Picture</div>
			<div class="panel-body">
				<div class="row">
					<div 
						s3-upload 
						bucket="'<%= ENV['aws_s3_bucket_upload'] -%>'" 
						ng-model="files.first"
						s3-upload-options="{getOptionsUri: '<%= api_v1_s3_access_token_path( ENV['aws_s3_bucket_upload'] ) -%>', folder: 'graeters/direct_uploads/'}"
					></div>
					<%= f.hidden_field :image_upload, data: {"ng-value" => "files.first"} -%>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="row">
	<%= f.submit "Save", :disable_with => 'Saving...', class: "btn btn-primary btn-wide", data: {"ng-disabled" => "audit_store_id == null"} -%>
	
	<button class="btn btn-default" type="button">Cancel</button>
</div>
<%- end -%>

<%- content_for :head do -%>
<%= stylesheet_link_tag "date_picker" %>

<style type="text/css" media="all">
	.panel-heading {
		-webkit-border-radius: 2px !important;
		-moz-border-radius: 2px !important;
		border-radius: 2px !important;
	}

	p.loading{
		font-weight: bold;
	}

	input[type=checkbox] + label {font-weight: normal;}
	.ng-cloak {
		display: none !important;
	}
	.btn-wide{
		min-width: 10em;
	}
</style>
<% end -%>

<%- content_for :page_js do -%>
<%= javascript_include_tag "angular.min.js" -%>
<%= javascript_include_tag "angular-sanitize.min.js" -%>
<%= javascript_include_tag "ng-s3upload.js" -%>
<%= javascript_include_tag "bootstrap-datepicker" -%>
<script type="text/javascript">
$(document).ready(function(){
	$('input#audit_created_at')
	       .datepicker({
	           format: 'mm/dd/yyyy'
	       });
})
</script>
<script type="text/javascript">

	angular.module('audit',["ngSanitize", "ngS3upload"])
	.service( "StoreSearch", ['$http', '$q', '$window',  function($http, $q, $window){
		var storeSearchUrl = '<%= api_v1_stores_search_path -%>';
		var save_location = null;
		return {
			setlocation: function(position){
				save_position = position;
			},

			findStores: function( query, dist, page, position){
				var deferred_geo = $q.defer();
				var query_distance = (parseFloat(dist) > 0 ? dist : null );

				var http_params = { q: query, distance: query_distance, page: page};

				if(query_distance != null && save_location == null && position == null){
					if ($window.navigator.geolocation) {
						$window.navigator.geolocation.getCurrentPosition(function(position){
							save_location = position;
							deferred_geo.resolve(position);
						},
						function(errObj){
							save_location = null;
							deferred_geo.reject(errObj);
						});
					}
				}
				else
					deferred_geo.resolve(position || save_location);


				return deferred_geo.promise.then(function(position) {
						if(position != null){
							http_params.lat = position.coords.latitude;
							http_params.lon = position.coords.longitude;
						}
						return $http({
								method: 'GET',
								url: storeSearchUrl,
								params: http_params
						});
					} 
				); 
				
			}

		}
	}])
	.service( "GMaps", ['$http', '$q', function($http,$q){
		return {

			getPosition: function(address){
				var deferred = $q.defer();

				$http.get('https://maps.googleapis.com/maps/api/geocode/json',{
					params: {
						sensor: false,
						address: address
					}
				}).then(function(result){
					var location = result.data.results[0].geometry.location;
					deferred.resolve({coords: {latitude: location.lat, longitude: location.lng}});
				},function(){});

				return deferred.promise;
			}
		}
	}])
	.factory( "StoreExchange", ['$rootScope',function($rootScope){

		var store_id = 0;
		var store_full_name = null;
		var store_address = null;
		var store_store_number = null;

		return {
			setSelectedStore: function(storeObject){

				store_id = parseInt(storeObject.id);
				store_full_name = storeObject.full_name;
				store_address = storeObject.address;
				store_store_number = storeObject.store_number;

				$rootScope.audit_store_id = store_id;

				$rootScope.$broadcast("storeChanged");
			},

			getSelectedStore: function(){
				return {
					id: store_id,
					full_name: store_full_name,
					address: store_address,
					store_number: store_store_number
				}
			}
		};
	}])
	.factory( "totalScore", ['$rootScope', function($rootScope){
		var metrics = [];		
		var finalScore = {
			base: 0,
			loss: 0,
			bonus: 0		
		}

		var retVal = {};

		retVal.addMetric = function(){
			metrics.push({
				base: 0,
				loss: 0,
				bonus: 0,
			});
		}

		retVal.addScore = function( index, baseScore, lossScore, bonusScore){
			metrics[index] = {
				base: baseScore,
				loss: lossScore,
				bonus: bonusScore
			};

			$rootScope.$broadcast("totalScoreChanged");
		}

		retVal.calculateScore = function(){
			finalScore = {
				base: 0,
				loss: 0,
				bonus: 0
			};

			for(i = 0; i < metrics.length; i++){
				finalScore.base += metrics[i].base;
				finalScore.loss += metrics[i].loss;
				finalScore.bonus += metrics[i].bonus;
			}

			return finalScore;
		}

		return retVal;
	}])
	.controller('StoreController', ['$scope', "StoreExchange", function( $scope, StoreExchange){
		$scope.full_name = '';
		$scope.address = '';
		$scope.store_number = '';

		$scope.init = function( store_id, storeFullName, storeAddress){
			if(store_id > 0){
				StoreExchange.setSelectedStore( {id: store_id, full_name: storeFullName, address: storeAddress, store_number: ($scope.store_number || null)});
			}
		}

		$scope.$on('storeChanged', function(){
			var storeObject = StoreExchange.getSelectedStore();
			$scope.store_id = storeObject.id;
			$scope.full_name = storeObject.full_name;
			$scope.address = storeObject.address;
			$scope.store_number = storeObject.store_number;
		})
	}])
	.controller('StoreSearchController', ['$scope', 'StoreExchange' ,'StoreSearch', 'GMaps', '$window', function($scope, StoreExchange, StoreSearch, GMaps, $window){
		$scope.stores = [];
		$scope.more_pages = false;
		$scope.current_page = 1;
		$scope.query_string = null;
		$scope.loading = false;
		$scope.loading_message = null;

		var saved_result_pages = [];
		var total_stores_returned = 0;

		var preloadStores = function(){
			StoreSearch.findStores( 
							$scope.query_string, 
							$scope.dist, 
							$scope.current_page + 1, 
							($scope.locationPoint == 1 ? GMaps.getPosition($scope.ref_address).then(function(data) {return data;}, function(){return null;}) : null)
			).then(function(payload){
				saved_result_pages.push(payload.data.results);
			}, function(){
				// Need to handle error when page cannot
				// be preloaded
			});
		}

		$scope.getStores = function(page){
			$scope.stores = [];	
			if(page == null || page == 1)	$scope.more_pages = false;

			if($scope.dist != null)
			{
				$scope.loading = true;
				if($scope.locationPoint == 1)
					$scope.loading_message = "Searching for stores ...";
				else
					$scope.loading_message = "Determining current location ... "
			}

			var store_search_promise = StoreSearch.findStores( 
				$scope.query_string, 
				$scope.dist, 
				page, 
				($scope.locationPoint == 1 ? GMaps.getPosition($scope.ref_address).then(function(data) {return data;}, function(){return null;}) : null)
			);
			store_search_promise
				.then(
					function(payload){

						$scope.loading = false;
						$scope.loading_message = null;

						$scope.current_page = payload.data.page;
						
						if($scope.current_page == 1) {
							saved_result_pages = [];
							total_stores_returned = payload.data.total;
						}
						
						$scope.stores = payload.data.results;
						$scope.more_pages = payload.data.more_pages;
						saved_result_pages.push(payload.data.results);

						if(payload.data.more_pages){
							// Preload another page to avoid page-flicker
							preloadStores();
						}
					},
					function(errorPayLoad){	

						$scope.loading = false;
						$scope.loading_message = null;

						$scope.more_pages = false;
						console.log( errorPayLoad);
					}
				);
		}

		$scope.previousPage = function(){
			$scope.current_page--;
			$scope.stores = saved_result_pages[$scope.current_page - 1];

			// As this function is called from clicking the Back
			// button on a section, we are assured that there are more
			// pages. 
			$scope.more_pages = true;
		}

		$scope.nextPage = function(){
			// Because of various flags put into place
			// this function cannot be reached unless there are more pages
			// So it is safe to increment the page counter at this time.
			$scope.current_page++;
			var total_pages = $window.Math.round(total_stores_returned/5);
			$scope.stores = saved_result_pages[$scope.current_page - 1];
			$scope.more_pages  = ($scope.current_page < total_pages);
			if($scope.more_pages && saved_result_pages.length == $scope.current_page)
				preloadStores();
			
		}

		$scope.selectStore = function(obj){
			StoreExchange.setSelectedStore( obj );
		}
	}])
	.controller('AuditController',['$scope', 'totalScore', 'StoreExchange',function($scope, totalScore, StoreExchange){
		$scope.baseScore = 0;
		$scope.lossScore = 0;
		$scope.bonusScore = 0;
		$scope.Math = window.Math;

		$scope.init = function( initial_values){
			if(initial_values != null){
				$scope.baseScore = initial_values.base;
				$scope.lossScore = initial_values.loss;
				$scope.bonusScore = initial_values.bonus;
			}
		}


		$scope.$on('totalScoreChanged', function(){
			var auditScore = totalScore.calculateScore();
			$scope.baseScore = auditScore.base;
			$scope.lossScore = auditScore.loss;
			$scope.bonusScore = auditScore.bonus;
		})

		$scope.$on('storeChanged', function(){
			$scope.store_id = StoreExchange.getSelectedStore().id;
		})
	}])
	.controller('AuditImageController', ['$scope', function($scope){
		$scope.files = {};

	}])
	.controller('AuditMetricController', ['$scope', 'totalScore', 'StoreExchange', function($scope, totalScore, StoreExchange) {
		$scope.comparisonType = null;
		$scope.metricScoreType = null;
		$scope.computedBaseScore = 0;
		$scope.computedLossScore = 0;
		$scope.computedBonusScore = 0;
		$scope.entry_values = [];
		$scope.entry_value_weights = [];
		$scope.entry_value_scores = [];
		$scope.entry_value_scoreTypes = [];
		$scope.metricIndex = 0;
		
		
		$scope.init = function( comparisonType, scoreType, index, initial_values ){
			$scope.comparisonType = comparisonType;
			$scope.metricScoreType = scoreType;
			$scope.metricIndex = index;
			totalScore.addMetric();
			if(initial_values != null){
				$scope.computedBaseScore = initial_values.base;
				$scope.computedLossScore = initial_values.loss;
				$scope.computedBonusScore = initial_values.bonus;
				totalScore.addScore( $scope.metricIndex, $scope.computedBaseScore, $scope.computedLossScore, $scope.computedBonusScore);
			}
		}
		
		$scope.calculateScore = function(){
			var baseScore = 0;
			var bonusScore = 0;
			var lossScore = 0;
			var score = 0;
			switch($scope.comparisonType)
			{
				case 'radio':
					score = $scope.score;

					break;
				case 'text_compare':
					if($scope.entry_values.length < 2) return 0;
					var maxWeightIndex = $scope.entry_value_weights.indexOf(Math.max.apply(Math, $scope.entry_value_weights));
					var maxValueIndex = $scope.entry_values.indexOf(Math.max.apply(Math, $scope.entry_values));
					var compareValue = parseInt($scope.entry_values[maxWeightIndex]);
					var targetValue = parseInt($scope.entry_values[maxValueIndex]);
					

					// The indexes between the three arrays are synchronised at initialisation
					// So if the index of the max value in the entry_values array matches the
					// index of the max weight then entry_value_weights array then the correct
					// highest weighted entry has the highest value as well. The only edge case
					// scenario for this logic is that if there is another element in the array that 
					// has a value equal to highest weighted value. Hence the compareValue == targetValue
					// comparison in case the maxValueindex and maxWeightIndex do not match up. 
					if(maxValueIndex == maxWeightIndex || compareValue == targetValue)
						score = $scope.entry_value_scores[maxWeightIndex];
					
					break;
				case 'custom_shelves':
					// If full door is selected then no need to do any computation
					if( $scope.entry_values.length == 7 && $scope.entry_values[6] == 1 )
					{
						baseScore = 0;
						bonusScore = 1;
						lossScore = 0;
						// Clear all other shelves if full door is selected
						for( i = 0; i < 6 ; i++) $scope.entry_values[i] = null;
						break;
					}
					
					// If full door is not selected then compute necessary values
					var iterations = ($scope.entry_values.length > 6 ? 6 : $scope.entry_values.length);
					for( i = 0; i < iterations; i++){
						// If the checkbox is not selected then no need to do any computation for this
						// iteration
						if($scope.entry_values[i] != 1) continue;
						
						// Depending on the score type assign the computed value 
						// to the correct variable.
						var score = $scope.entry_value_scores[i] * $scope.entry_value_weights[i];
						switch($scope.entry_value_scoreTypes[i]){
							case 'base':
								baseScore += score;
								break;
							case 'loss':
								lossScore += score;
								break;		
							case 'bonus':
								bonusScore += score;
								break;		
						}
					}
					break;
				case 'computed':
					if( typeof $scope.quantifier === 'undefined') break;
					var score = $scope.entry_value * parseFloat($scope.quantifier);

					break;
				}
				
				// This computation section is already happening for 
				// custom_shelves hence no need to do it here. 
				if($scope.comparisonType != "custom_shelves")
				{
					switch($scope.metricScoreType)
					{
						case 'base':
							baseScore = score;
							break;
						case 'bonus':
							bonusScore = score;
							break;
						case 'loss':
							lossScore = score;
							break;	
					}
				}

				$scope.computedBaseScore = Math.round(baseScore);
				$scope.computedLossScore = Math.round(lossScore);
				$scope.computedBonusScore = Math.round(bonusScore);
				
				totalScore.addScore( $scope.metricIndex, $scope.computedBaseScore, $scope.computedLossScore, $scope.computedBonusScore);
				
				return;
			}
			
		}]);

</script>

<%- end -%>