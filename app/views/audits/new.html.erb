<%- if defined?audit_errors -%>
<div id="error_explanation">
	<h2><%= pluralize(audit_errors.errors.count, "error") %> prohibited this store from being saved:</h2>
	<ul>
		<% audit_errors.errors.full_messages.each do |msg| %>
		<li><%= msg %></li>
		<% end %>
	</ul>
</div>
<% end -%>

<%= form_for audit do |f| -%>
<div class="hidden">
	<%= f.hidden_field :base -%>
	<%= f.hidden_field :loss -%>
	<%= f.hidden_field :bonus -%>
	<%= f.hidden_field :person_id, value: 1 -%>
	<%= f.hidden_field :store_id -%>
</div>
<%= f.submit "Save", :disable_with => 'Saving...', class: "btn btn-primary" -%>
<div class="container" id="auditEntryForm" data-ng-app="audit">
	<div class="row well well-sm">	
		<%= f.fields_for :store do |sf| -%>
		<span style="text-transform:uppercase"><%= sf.object.full_name -%></span>
		<address><%= sf.object.address -%></address>
		<%= sf.label :store_number -%>
		<%= sf.text_field :store_number, class: "form-control" -%>
		<%- end -%>
	</div>
	<%- metric_index = 0 -%>
	<%= f.fields_for :audit_metrics do |a_m| -%>
	<div class="row" data-ng-controller="AuditMetricController" data-ng-init="init('<%= metrics[metric_index][:response_type] -%>', '<%= metrics[metric_index][:score_type] -%>', <%= metric_index -%>)">
		<div class="panel panel-sm panel-default">
			<div class="panel-heading">
				<div class="row">
					<div class="col-md-10 col-sm-10 col-xs-10"><strong><%= metrics[metric_index][:title].html_safe -%></strong></div>
					<div class="col-md-2 col-sm-2 col-xs-2 text-right ng-cloak">
						<span class="label label-success" data-ng-show="computedBaseScore > 0">{{computedBaseScore}}</span>
						<span class="label label-danger" data-ng-show="computedLossScore < 0">{{computedLossScore * -1}}</span>
						<span class="label label-primary" data-ng-show="computedBonusScore > 0">{{computedBonusScore}}</span>
					</div>
				</div>
			</div>
			<div class="panel-body">
				<div class="row">
					<%- if metrics[metric_index][:response_type] == 'textarea' -%>
					<div class="col-md-12 col-sm-12 col-xs-12">
						<%- if !metrics[metric_index][:description].blank? -%>
						<p><%= metrics[metric_index][:description].html_safe -%></p>
						<%- end -%>						
					</div>
					<div class="col-md-12 col-sm-12 col-xs-12">
						<%=	a_m.fields_for :audit_metric_responses do |a_m_r| -%>
						<%= a_m_r.hidden_field :selected, value: 1 -%>
						<%= a_m_r.text_area :entry_value, data: {"ng-model" => "entry_value", "ng-init" => "entry_value='#{a_m_r.object[:entry_value]}'"}, cols: 80, rows: 5, class: "form-control" -%>
						<% end -%>
					</div>
					<%- else -%>
					<div class="col-md-12 col-sm-12 col-xs-12">
						<%- if !metrics[metric_index][:description].blank? -%>
						<p><%= metrics[metric_index][:description].html_safe -%></p>
						<%- end -%>	
						<div style="display:none">
							<%= a_m.hidden_field :metric_id -%>
							<%= a_m.hidden_field :score_type, value: metrics[metric_index][:score_type] -%>
						</div>
						<div class="container">
							<div class="row">
								<%- case metrics[metric_index][:response_type] -%>
								<%- when 'radio' -%>
								<%- metric_option_index = 0 -%>																		
								<%= a_m.fields_for :audit_metric_responses do |a_m_r| -%>
								<div class="col-md-4 col-sm-12 col-xs-12">
									<div class="input-group">
										<span class="input-group-addon">
											<%= a_m.radio_button :score, metrics[metric_index].metric_options[metric_option_index][:points], data: {"ng-model" => "score", "ng-init" => "score = #{a_m.object[:score]}", "ng-change" => "calculateScore()"} -%>
										</span>
										<%= a_m.label :score, metrics[metric_index].metric_options[metric_option_index][:label], value: metrics[metric_index].metric_options[metric_option_index][:points], class: "form-control" -%>
									</div>
									<%-  metric_option_index = metric_option_index + 1 -%>
								</div>
								<%- end -%>
								<%- when 'text_compare' -%>
								<%= a_m.hidden_field :score, data: {"ng-value" => "computedScore"} -%>
								<%- metric_option_index = 0 -%>
								<%= a_m.fields_for :audit_metric_responses do |a_m_r| -%>
								<div class="col-md-4 col-sm-12 col-xs-12">
									<%= a_m_r.label :entry_value, metrics[metric_index].metric_options[metric_option_index][:label] -%>
									<%= a_m_r.text_field :entry_value, type: 'number', min: 0,class: "form-control input-sm", data: { "ng-model" => "entry_values[#{metric_option_index}]", "ng-change" => "calculateScore()", "ng-init" => "entry_values[#{metric_option_index}] = #{a_m_r.object[:entry_value] || 0}; entry_value_weights[#{metric_option_index}] = #{metrics[metric_index].metric_options[metric_option_index][:weight]}; entry_value_scores[#{metric_option_index}] = #{metrics[metric_index].metric_options[metric_option_index][:points]}"} -%>
									<%= a_m_r.hidden_field :metric_option_id -%>	
								</div>
								<%- metric_option_index = metric_option_index + 1 -%>								
								<%- end -%>
								<%- when 'custom_shelves' -%>
								<%- metric_option_index = 0 -%>
								<%= a_m.fields_for :audit_metric_responses do |a_m_r| -%>
								<div class="col-md-4 col-sm-12 col-xs-12 text-nowrap">
									<div class="input-group">
										<span class="input-group-addon">
											<%= a_m_r.check_box :selected, data:{ 
												"ng-model" => "entry_values[#{metric_option_index}]", 
												"ng-change" => "calculateScore()",
												"ng-init" =>  
												"entry_values[#{metric_option_index}] = #{a_m_r.object[:selected] || false};
												entry_value_scoreTypes[#{metric_option_index}] = '#{ metrics[metric_index].metric_options[metric_option_index][:isBonus] ? 'bonus': ( metrics[metric_index].metric_options[metric_option_index][:points] < 0 ? 'loss' : 'base' ) }';
												entry_value_scores[#{metric_option_index}] = #{metrics[metric_index].metric_options[metric_option_index][:points]}; 
												entry_value_weights[#{metric_option_index}] = #{metrics[metric_index].metric_options[metric_option_index][:weight]}"										
											}-%>
										</span>
										<%= a_m_r.label :selected, metrics[metric_index].metric_options[metric_option_index][:label], class: "form-control input-sm" -%>
									</div>
								</div>
								<div style="display:none">
									<%= a_m_r.hidden_field :metric_option_id -%>
								</div>
								<%- metric_option_index = metric_option_index + 1 -%>	
								<%- end -%>	
								<%- when 'computed' -%>
								<%= a_m.fields_for :audit_metric_responses do |a_m_r| -%>
								<%= a_m_r.hidden_field :metric_option_id -%>
								<%= a_m_r.text_field :entry_value, type: 'number', min: 0, class: "form-control input-sm", data: {"ng-model" => "entry_value", "ng-init" => "entry_value = #{a_m_r.object[:entry_value] || 0}", "ng-change" => "calculateScore()", "ng-init" => "quantifier = #{metrics[metric_index].metric_options.first[:points]}"} -%>
								<% end -%>


								<%- end -%> <!-- CASE END -->
							</div>
							<div class="row">
								<p data-ng-show="computedLossScore < 0" class="ng-hide checkbox-inline ng-cloak">
									<%= a_m.check_box :needs_resolution -%>
									<%= a_m.label :needs_resolution, "This issue has been resolved" -%>
								</p>
							</div>
						</div> 
					</div>
					<%- end -%>
				</div>
			</div>
		</div>
	</div>

	<%- metric_index = metric_index + 1 -%>
	<%- end -%>

	<div class="row" style="padding:0" data-ng-controller="AuditController">
		<div class="col-md-3 col-md-push-9 col-sm-12 col-xs-12" style="padding:0">
			<div class="panel panel-primary">
				<div class="panel-heading">Score</div>
				<div class="panel-body">
					<ul class="list-group ng-cloak">
						<li class="list-group-item primary"><span>Base</span><span class="pull-right">{{baseScore}}</span></li>
						<li class="list-group-item danger"><spa>Loss</span><span class="pull-right">{{lossScore}}</span></li>
						<li class="list-group-item success"><span>Bonus</span><span class="pull-right">{{bonusScore}}</span></li>
						<li class="list-group-item"><strong><span>Total</span><span class="pull-right">{{baseScore + lossScore + bonusScore}}</span></strong></li>
					</ul>					
				</div>
			</div>
		</div>
		<div class="col-md-8 col-md-pull-3 col-sm-12 col-xs-12" style="padding: 0">
			<div class="panel panel-default">
				<div class="panel-heading"><%= f.label :audit_comment, "Comments" -%></div>
				<div class="panel-body">
					<p>[Some description of how scoring is related to comments]</p>
					<%= f.text_area :audit_comment, class: "form-control", cols: 80, rows: 5 -%>
				</div>
			</div>
		</div>
	</div>

	<div class="row ng-cloak" data-ng-show="s3_image_upload_available == true" data-ng-controller="AuditImageController">
		<div class="panel panel-default">
			<div class="panel-heading">Attach Picture</div>
			<div class="panel-body">
				<div class="row">
					<div class="col-md-6 col-sm-12 col-xs-12">
						<div file-upload="uploadFile(files)"></div>
						<div id="fileUploadProgress"></div>
					</div>
					<div class="col-md-6 col-sm-12 col-xs-12 text-right">
						<img data-ng-src="{{image_url}}" alt="" style="max-width: 150px; max-height: 150px"/>
						<span>{{image_url}}</span>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<%- end -%>

<%- content_for :head do -%>
<style type="text/css" media="all">
	.panel-heading {
		-webkit-border-radius: 2px !important;
		-moz-border-radius: 2px !important;
		border-radius: 2px !important;
	}

	input.form-control{
		width: 7em;
	}
	input[type=checkbox] + label {font-weight: normal;}
	.ng-cloak {
		display: none !important;
	}
</style>
<% end -%>

<%- content_for :page_js do -%>
<%= javascript_include_tag "angular.min.js" -%>
<%= javascript_include_tag "angular-sanitize.min.js" -%>
<%= javascript_include_tag "s3upload.js" -%>
<script type="text/javascript">

	angular.module('audit',[])
	.service( 's3', ['$http', function($http){
		return{
			bucket: "<%= ENV['aws_s3_bucket_upload'] -%>",
			getSigningCredentials: function(){
				return $http.get("<%= api_v1_s3_access_token_path( ENV['aws_s3_bucket_upload'] ) -%>");
			}
		}
	}])
	.directive('fileUpload', function() {
	  return {
	    restrict: 'A',
	    scope: { fileUpload: '&' },
	    template: '<input type="file" id="file" capture="camera" accept="image/*" /> ',
	    replace: true,
	    link: function(scope, ele, attrs) {
	      ele.bind('change', function() {
	        var file = ele[0].files;
	        if (file) scope.fileUpload({files: file});
	      })
	    }
	  }
	})
	.factory( "totalScore", ['$rootScope', function($rootScope){
		var metrics = [];		
		var finalScore = {
			base: 0,
			loss: 0,
			bonus: 0		
		}

		var retVal = {};

		retVal.addMetric = function(){
			metrics.push({
				base: 0,
				loss: 0,
				bonus: 0,
			});
		}

		retVal.addScore = function( index, baseScore, lossScore, bonusScore){
			metrics[index] = {
				base: baseScore,
				loss: lossScore,
				bonus: bonusScore
			};

			$rootScope.$broadcast("totalScoreChanged");
		}

		retVal.calculateScore = function(){
			finalScore = {
				base: 0,
				loss: 0,
				bonus: 0
			};

			for(i = 0; i < metrics.length; i++){
				finalScore.base += metrics[i].base;
				finalScore.loss += metrics[i].loss;
				finalScore.bonus += metrics[i].bonus;
			}

			return finalScore;
		}

		return retVal;
	}])
	.controller('AuditController',['$scope', 'totalScore', function($scope, totalScore){
		$scope.baseScore = 0;
		$scope.lossScore = 0;
		$scope.bonusScore = 0;
		$scope.Math = window.Math;


		$scope.$on('totalScoreChanged', function(){
			var auditScore = totalScore.calculateScore();
			$scope.baseScore = auditScore.base;
			$scope.lossScore = auditScore.loss;
			$scope.bonusScore = auditScore.bonus;
		})
	}])
	.controller('AuditImageController', ['$scope', 's3', function($scope, s3){
		var progressElem = $("div#fileUploadProgress");

		$scope.aws_s3_credentials = {};
		$scope.s3_image_upload_available = true;	
		$scope.image_url = 'http://placehold.it/150x150';

		s3.getSigningCredentials().then( function( data ) {
			$scope.aws_s3_credentials = data.data;
		},
		function( error ){
			$scope.s3_image_upload_available = false;
		});

		var S3Tools = new S3ToolsClass("<%= ENV['aws_s3_bucket_upload'] -%>");
		
		$scope.uploadFile = function(files) {
		  var file = files[0];
		  S3Tools.uploadFile(file, $scope.aws_s3_credentials, handleProgress, handleSuccess, handleError);
		}
		
		function handleProgress(percentComplete) {
		  document.getElementById('fileUploadProgress').innerHTML = percentComplete.toString() + '%';
		}
		
		function handleSuccess(fileName) {
		  document.getElementById('fileUploadProgress').innerHTML = 'Done!';
		  $scope.image_url = 'http://placehold.it/75x75';
		  //document.getElementById('resultImage').setAttribute('src', 'https://' + bucketName + '.s3.amazonaws.com/avatar/' + fileName);
		}
		
		function handleError(message) {
		  document.getElementById('fileUploadProgress').innerHTML = 'Error: ' + message;
		}

	}])
	.controller('AuditMetricController', ['$scope', 'totalScore', function($scope, totalScore) {
		$scope.comparisonType = null;
		$scope.metricScoreType = null;
		$scope.computedBaseScore = 0;
		$scope.computedLossScore = 0;
		$scope.computedBonusScore = 0;
		$scope.entry_values = [];
		$scope.entry_value_weights = [];
		$scope.entry_value_scores = [];
		$scope.entry_value_scoreTypes = [];
		$scope.metricIndex = 0;
		
		
		$scope.init = function( comparisonType, scoreType, index ){
			$scope.comparisonType = comparisonType;
			$scope.metricScoreType = scoreType;
			$scope.metricIndex = index;
			totalScore.addMetric();
		}
		
		$scope.calculateScore = function(){
			var baseScore = 0;
			var bonusScore = 0;
			var lossScore = 0;
			switch($scope.comparisonType)
			{
				case 'radio':
				switch($scope.metricScoreType)
				{
					case 'base':
					baseScore = parseInt($scope.score);
					break;
					case 'loss':
					lossScore = parseInt($scope.score);
					break;
					case 'bonus':
					bonusScore = parseInt($scope.score);
					break;
				}

				break;
				case 'text_compare':
				if($scope.entry_values.length < 2) return 0;
				var maxWeightIndex = $scope.entry_value_weights.indexOf(Math.max.apply(Math, $scope.entry_value_weights));
				var maxValueIndex = $scope.entry_values.indexOf(Math.max.apply(Math, $scope.entry_values));
				var compareValue = parseInt($scope.entry_values[maxWeightIndex]);
				var targetValue = parseInt($scope.entry_values[maxValueIndex]);
				
					// The indexes between the three arrays are synchronised at initialisation
					// So if the index of the max value in the entry_values array matches the
					// index of the max weight then entry_value_weights array then the correct
					// highest weighted entry has the highest value as well. The only edge case
					// scenario for this logic is that if there is another element in the array that 
					// has a value equal to highest weighted value. Hence the compareValue == targetValue
					// comparison in case the maxValueindex and maxWeightIndex do not match up. 
					if(maxValueIndex == maxWeightIndex || compareValue == targetValue)
						baseScore = $scope.entry_value_scores[maxWeightIndex];
					
					break;
					case 'custom_shelves':
					// If full door is selected then no need to do any computation
					if( $scope.entry_values.length == 7 && $scope.entry_values[6] == 1 )
					{
						baseScore = 0;
						bonusScore = 1;
						lossScore = 0;
						// Clear all other shelves if full door is selected
						for( i = 0; i < 6 ; i++) $scope.entry_values[i] = null;
							break;
					}
					
					// If full door is not selected then compute necessary values
					var iterations = ($scope.entry_values.length > 6 ? 6 : $scope.entry_values.length);
					for( i = 0; i < iterations; i++){
						// If the checkbox is not selected then no need to do any computation for this
						// iteration
						if($scope.entry_values[i] != 1) continue;
						
						// Depending on the score type assign the computed value 
						// to the correct variable.
						var score = $scope.entry_value_scores[i] * $scope.entry_value_weights[i];
						switch($scope.entry_value_scoreTypes[i]){
							case 'base':
							baseScore += score;
							break;
							case 'loss':
							lossScore += score;
							break;		
							case 'bonus':
							bonusScore += score;
							break;		
						}
					}
					break;
					case 'computed':
					if( typeof $scope.quantifier === 'undefined') break;
					var score = $scope.entry_value * parseFloat($scope.quantifier);

					if(score < 0)
						lossScore = score;
					else
						baseScore = score;

					break;
				}
				
				$scope.computedBaseScore = Math.round(baseScore);
				$scope.computedLossScore = Math.round(lossScore);
				$scope.computedBonusScore = Math.round(bonusScore);
				
				totalScore.addScore( $scope.metricIndex, $scope.computedBaseScore, $scope.computedLossScore, $scope.computedBonusScore);
				
				return;
			}
			
		}]);

</script>

<%- end -%>