
<div class="row form-group">
	<%= link_to "Edit", edit_audit_path(audit), class: "btn btn-standard btn-primary" -%>
	<button class="btn btn-standard btn-danger" type="button" onclick="deleteAudit()">Delete</button>
	<%=link_to "Close", session[:last_page] || audit_search_path, class: "btn btn-standard btn-default" -%>
</div>
<div class="row well well-sm">
	<div class="col-md-6 col-sm-12 col-xs-12 container">
		<div class="row" style="margin-bottom: 0.7em">
			<div class="col-md-2 col-sm-12 col-xs-12"><label>Date</label></div>
			<div class="col-md-10 col-sm-12 col-xs-12"><%= audit[:created_at].strftime('%m/%d/%Y') -%></div>
		</div>
		<div class="row" style="margin-bottom: 0.7em">
			<div class="col-md-2 col-sm-12 col-xs-12"><label>Auditor</label></div>
			<div class="col-md-10 col-sm-12 col-xs-12"><%= audit[:auditor_name] -%></div>
		</div>
		<div class="row" style="margin-bottom: 0.7em">
			<div class="col-md-2 col-sm-12 col-xs-12"><label>Store</label></div>
			<div class="col-md-10 col-sm-12 col-xs-12">
				<%= link_to audit.store.full_name, store_path(audit.store) -%>, 
				<%= audit.store.address -%>
			</div>
		</div>
		<div class="row" style="margin-bottom: 0.7em">
			<div class="col-md-2 col-sm-12 col-xs-12"><label>Issues</label></div>
			<div class="col-md-10 col-sm-12 col-xs-12">
				<%= (audit[:has_unresolved_issues] ? "There are unresolved issues" : "No unresolved issues") -%>
			</div>
		</div>
		<%- if !audit.store[:store_number].blank? -%>
		<div class="row" style="margin-bottom: 0.7em">
			<div class="col-md-2 col-sm-12 col-xs-12"><label>Store Number</label></div>
			<div class="col-md-10 col-sm-12 col-xs-12"><%= audit.store[:store_number] -%></div>		
		</div>
		<%- end -%>	
		<%- if audit.comments.present? -%>
		<div class="row" style="margin-bottom: 0.7em">
			<div class="col-md-2 col-sm-12 col-xs-12"><label>Comments</label></div>
			<div class="col-md-10 col-sm-12 col-xs-12">
				<%= audit.comments.first[:content] -%>
			</div>
		</div>
		<%- end -%>
		<%- if audit.images.present? -%>
		<div class="row" style="margin-bottom: 0.7em">
			<div class="col-md-2 col-sm-12 col-xs-12"><label>Attached Picture</label></div>
			<div class="col-md-10 col-sm-12 col-xs-12">
				<div class="row audit-image-gallery" >
				<%- audit.images.each_with_index do |image, index| -%>		
					<a href="<%=image[:content_url]-%>" data-size="<%=image[:content_url_size] || Image.dimensions(image[:content_url])-%>"  
						class="col-md-3 col-lg-4 col-sm-6 col-xs-12">
						<img src="<%=image[:thumbnail_url] || image[:content_url]-%>" class="img-thumbnail" style="max-width:200px; max-height:200px" alt="Pictures of audit from <%= audit[:created_at].strftime('%m/%d/%Y') -%> for <%= audit.store.full_name -%>"/>
					</a>	
				<%- end -%>				
	     			</div>
			</div>
		</div>
		<%- end -%>
	</div>
	<div class="col-md-3 col-md-offset-3 col-sm-12 col-xs-12" style="padding: 0">
		<div class="panel panel-primary">
			<div class="panel-heading">Score</div>
			<div class="panel-body">
				<ul class="list-group">
					<li class="list-group-item text-success"><label>Base</label><span class="pull-right"><%= audit[:base] -%></span></li>
					<li class="list-group-item text-danger"><label>Loss</label><span class="pull-right"><%= audit[:loss] -%></span></li>
					<li class="list-group-item text-info"><label>Bonus</label><span class="pull-right"><%= audit[:bonus] -%></span></li>
					<li class="list-group-item"><strong><label>Total</label><span class="pull-right"><%= audit.total_score -%></span></strong></li>
				</ul>					
			</div>
		</div>		
	</div>
</div>

<%- audit.audit_metrics.sort{ |a, b| a.metric[:display_order] <=> b.metric[:display_order]}.each do |audit_metric| -%>

	<div class="row">
		<div class="panel panel-default">
			<div class="panel-heading">
				<div class="row">
					<div class="col-md-10 col-sm-10 col-xs-10">
						<strong><%= audit_metric.metric[:title].html_safe -%></strong>
					</div>
					<div class="col-md-2 col-sm-2 col-xs-2 text-right">
					<%- 
						if audit_metric.metric[:track_resolution] && !audit_metric[:loss].zero?
							html_class= (audit_metric[:resolved] ? "success" : "danger")
							icon = (audit_metric[:resolved] ? "check" : "warning")
							text = (audit_metric[:resolved] ? "Issue resolved" : "This issue has not been resolved")
					-%>
						<span class="label"><i class="fa fa-<%= icon -%> text-<%= html_class -%>" title="<%= text -%>"></i></span>
					<%- end -%>
						<%= "<span class='label label-success'>#{audit_metric[:base]}</span>".html_safe unless audit_metric[:base].zero? -%> 
						<%= "<span class='label label-danger'>#{audit_metric[:loss].abs}</span>".html_safe unless audit_metric[:loss].zero? -%>
						<%= "<span class='label label-primary'>#{audit_metric[:bonus]}</span>".html_safe unless audit_metric[:bonus].zero? -%>

					</div>
				</div>
			</div>
			<div class="panel-body">
				<ul style="list-style: none">
				<%- audit_metric.audit_metric_responses.select{|i| i.metric_option.metric[:response_type] == 'custom_shelves' || i[:selected]}.sort{ |a, b| a.metric_option[:display_order] <=> a.metric_option[:display_order]}.each do |response| -%>
					<li class="col-md-4 col-sm-12 col-xs-12">
					<%-
						case audit_metric.metric[:response_type]
							when "text_compare"
					-%>
								<label style="display:inline-block;width: 6.5em"><%= response.metric_option[:label] -%></label>: 
								<%= response[:entry_value] -%>
					<%-		when /^(computed|textarea)$/ -%>
								<%= response[:entry_value] -%>
					<%- 	else -%>
								<%- if response.metric_option.metric[:response_type] != "radio" -%>
									<i class="fa <%= response[:selected] ? "fa-check-square-o": "fa-square-o" -%>"></i> 
								<%- end -%>

								<%= response.metric_option[:label] -%>
					<% end -%>
					</li>
				<%- end -%>

				</ul>
			</div>
		</div>
	</div>
<% end -%>

<div id="gallery" class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="pswp__bg"></div>

	<div class="pswp__scroll-wrap">

		<div class="pswp__container">
		<div class="pswp__item"></div>
		<div class="pswp__item"></div>
		<div class="pswp__item"></div>
		</div>

		<div class="pswp__ui pswp__ui--hidden">

		<div class="pswp__top-bar">

			<div class="pswp__counter"></div>

			<button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

			<button class="pswp__button pswp__button--share" title="Share"></button>

			<button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

			<button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

			<div class="pswp__preloader">
				<div class="pswp__preloader__icn">
					<div class="pswp__preloader__cut">
					<div class="pswp__preloader__donut"></div>
					</div>
				</div>
			</div>
		</div>

		<!-- <div class="pswp__loading-indicator"><div class="pswp__loading-indicator__line"></div></div> -->

		<div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
			<div class="pswp__share-tooltip">
				<!-- <a href="#" class="pswp__share--facebook"></a>
				<a href="#" class="pswp__share--twitter"></a>
				<a href="#" class="pswp__share--pinterest"></a>
				<a href="#" download class="pswp__share--download"></a> -->
			</div>
		</div>

		<button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
		<button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>
		<div class="pswp__caption">
			<div class="pswp__caption__center">
			</div>
		</div>
		</div>
	</div>
</div>

<%- content_for :head do -%>
	<%= stylesheet_link_tag "sweet-alert.css" -%>
	<%= stylesheet_link_tag "photoswipe.css" -%>
	<%= stylesheet_link_tag "default-skin/photoswipe_default_ui.css" -%>
<%- end -%>

<%- content_for :page_js do -%>
	<%= javascript_include_tag "sweet-alert.min.js" -%>
	<%= javascript_include_tag "photoswipe.min.js" -%>
	<%= javascript_include_tag "photoswipe_default_ui.min.js" -%>

	<script type="text/javascript">
	var URL = {
		destroy_audit: '<%= audit_path(audit[:id], format: :json) -%>',
		audits_path: '<%= audit_search_path({cache_buster: Date.today.to_date}) -%>'
	};
    (function() {
		var initPhotoSwipeFromDOM = function(gallerySelector) {
			var parseThumbnailElements = function(el) {
			    var thumbElements = el.childNodes,
			        numNodes = thumbElements.length,
			        items = [],
			        el,
			        childElements,
			        thumbnailEl,
			        size,
			        item;
			    for(var i = 0; i < numNodes; i++) {
			        el = thumbElements[i];
			        // include only element nodes 
			        if(el.nodeType !== 1) {
			          continue;
			        }
			        childElements = el.children;
			        size = el.getAttribute('data-size').split('x');
			        // create slide object
			        item = {
						src: el.getAttribute('href'),
						w: parseInt(size[0], 10),
						h: parseInt(size[1], 10),
						author: el.getAttribute('data-author')
			        };
			        item.el = el; // save link to element for getThumbBoundsFn
			        if(childElements.length > 0) {
			          item.msrc = childElements[0].getAttribute('src'); // thumbnail url
			          if(childElements.length > 1) {
			              item.title = childElements[1].innerHTML; // caption (contents of figure)
			          }
			        }
					var mediumSrc = el.getAttribute('data-med');
		          	if(mediumSrc) {
		            	size = el.getAttribute('data-med-size').split('x');
		            	// "medium-sized" image
		            	item.m = {
		              		src: mediumSrc,
		              		w: parseInt(size[0], 10),
		              		h: parseInt(size[1], 10)
		            	};
		          	}
		          	// original image
		          	item.o = {
		          		src: item.src,
		          		w: item.w,
		          		h: item.h
		          	};
			        items.push(item);
			    }
			    return items;
			};
			// find nearest parent element
			var closest = function closest(el, fn) {
			    return el && ( fn(el) ? el : closest(el.parentNode, fn) );
			};
			var onThumbnailsClick = function(e) {
			    e = e || window.event;
			    e.preventDefault ? e.preventDefault() : e.returnValue = false;
			    var eTarget = e.target || e.srcElement;
			    var clickedListItem = closest(eTarget, function(el) {
			        return el.tagName === 'A';
			    });
			    if(!clickedListItem) {
			        return;
			    }
			    var clickedGallery = clickedListItem.parentNode;
			    var childNodes = clickedListItem.parentNode.childNodes,
			        numChildNodes = childNodes.length,
			        nodeIndex = 0,
			        index;
			    for (var i = 0; i < numChildNodes; i++) {
			        if(childNodes[i].nodeType !== 1) { 
			            continue; 
			        }
			        if(childNodes[i] === clickedListItem) {
			            index = nodeIndex;
			            break;
			        }
			        nodeIndex++;
			    }
			    if(index >= 0) {
			        openPhotoSwipe( index, clickedGallery );
			    }
			    return false;
			};
			var photoswipeParseHash = function() {
				var hash = window.location.hash.substring(1),
			    params = {};
			    if(hash.length < 5) { // pid=1
			        return params;
			    }
			    var vars = hash.split('&');
			    for (var i = 0; i < vars.length; i++) {
			        if(!vars[i]) {
			            continue;
			        }
			        var pair = vars[i].split('=');  
			        if(pair.length < 2) {
			            continue;
			        }           
			        params[pair[0]] = pair[1];
			    }
			    if(params.gid) {
			    	params.gid = parseInt(params.gid, 10);
			    }
			    return params;
			};
			var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {
			    var pswpElement = document.querySelectorAll('.pswp')[0],
			        gallery,
			        options,
			        items;
				items = parseThumbnailElements(galleryElement);
			    // define options (if needed)
			    options = {
			        galleryUID: galleryElement.getAttribute('data-pswp-uid'),
			        getThumbBoundsFn: function(index) {
			            // See Options->getThumbBoundsFn section of docs for more info
			            var thumbnail = items[index].el.children[0],
			                pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
			                rect = thumbnail.getBoundingClientRect(); 
			            return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};
			        },
			        addCaptionHTMLFn: function(item, captionEl, isFake) {
						if(!item.title) {
							captionEl.children[0].innerText = '';
							return false;
						}
						captionEl.children[0].innerHTML = item.title +  '<br/><small>Photo: ' + item.author + '</small>';
						return true;
			        }
					
			    };
			    if(fromURL) {
			    	if(options.galleryPIDs) {
			    		// parse real index when custom PIDs are used 
			    		// http://photoswipe.com/documentation/faq.html#custom-pid-in-url
			    		for(var j = 0; j < items.length; j++) {
			    			if(items[j].pid == index) {
			    				options.index = j;
			    				break;
			    			}
			    		}
				    } else {
				    	options.index = parseInt(index, 10) - 1;
				    }
			    } else {
			    	options.index = parseInt(index, 10);
			    }
			    // exit if index not found
			    if( isNaN(options.index) ) {
			    	return;
			    }
				var radios = document.getElementsByName('gallery-style');
				for (var i = 0, length = radios.length; i < length; i++) {
				    if (radios[i].checked) {
				        if(radios[i].id == 'radio-all-controls') {
				        } else if(radios[i].id == 'radio-minimal-black') {
				        	options.mainClass = 'pswp--minimal--dark';
					        options.barsSize = {top:0,bottom:0};
							options.captionEl = false;
							options.fullscreenEl = false;
							options.shareEl = false;
							options.bgOpacity = 0.85;
							options.tapToClose = true;
							options.tapToToggleControls = false;
				        }
				        break;
				    }
				}
			    if(disableAnimation) {
			        options.showAnimationDuration = 0;
			    }
			    options.shareButtons = [
    				{id:'download', label:'Download image', url:'{{raw_image_url}}', download:true}];

			    // Pass data to PhotoSwipe and initialize it
			    gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
			    // see: http://photoswipe.com/documentation/responsive-images.html
				var realViewportWidth,
				    useLargeImages = false,
				    firstResize = true,
				    imageSrcWillChange;
				gallery.listen('beforeResize', function() {
					var dpiRatio = window.devicePixelRatio ? window.devicePixelRatio : 1;
					dpiRatio = Math.min(dpiRatio, 2.5);
				    realViewportWidth = gallery.viewportSize.x * dpiRatio;
				    if(realViewportWidth >= 1200 || (!gallery.likelyTouchDevice && realViewportWidth > 800) || screen.width > 1200 ) {
				    	if(!useLargeImages) {
				    		useLargeImages = true;
				        	imageSrcWillChange = true;
				    	}
				        
				    } else {
				    	if(useLargeImages) {
				    		useLargeImages = false;
				        	imageSrcWillChange = true;
				    	}
				    }
				    if(imageSrcWillChange && !firstResize) {
				        gallery.invalidateCurrItems();
				    }
				    if(firstResize) {
				        firstResize = false;
				    }
				    imageSrcWillChange = false;
				});
				gallery.listen('gettingData', function(index, item) {
				    if( true || useLargeImages ) {
				        item.src = item.o.src;
				        item.w = item.o.w;
				        item.h = item.o.h;
				    } else {
				        item.src = item.m.src;
				        item.w = item.m.w;
				        item.h = item.m.h;
				    }
				});
			    gallery.init();
			};
			// select all gallery elements
			var galleryElements = document.querySelectorAll( gallerySelector );
			for(var i = 0, l = galleryElements.length; i < l; i++) {
				galleryElements[i].setAttribute('data-pswp-uid', i+1);
				galleryElements[i].onclick = onThumbnailsClick;
			}
			// Parse URL and open gallery if it contains #&pid=3&gid=1
			var hashData = photoswipeParseHash();
			if(hashData.pid && hashData.gid) {
				openPhotoSwipe( hashData.pid,  galleryElements[ hashData.gid - 1 ], true, true );
			}
		};
		initPhotoSwipeFromDOM('.audit-image-gallery');
	})();

	function deleteAudit(){
		swal({
			title: "Are you sure?",
			text: "You will not be able to recover this audit",
			type: "warning",
			showCancelButton: true,
			confirmButtonText: "Yes",
			closeOnConfirm: true
		},
		function(){
			$.ajax({
				type: "DELETE",
				url: URL.destroy_audit,
				dataType: 'json',
				success: function(data){
					window.location = '<%= session[:last_page] || audit_search_path -%>';
				},
				error: function(xhr){
					alert("Could not delete");
				}
			});			
		});

	}
	</script>
<%- end -%>