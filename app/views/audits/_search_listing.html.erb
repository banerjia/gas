<%-
	show_store ||= true

	more_pages = false unless defined?(more_pages)
	total_audits ||= 0
	page = (defined?(options) && options[:page].present? ? options[:page] : 1).to_i
	per_page = (options[:per_page] || $audit_page_size).to_i

	audits_list = audits[:results]
	total_audits = audits[:total].to_i
	more_pages = audits[:more_pages]

	last_page = (total_audits/per_page) + (total_audits % per_page ? 1 : 0)

	if defined?(options)
		options_without_page = options.clone
		options_without_page.delete(:page)
	end

	# Determining sort link
	new_sort = "created_at-desc" # Default
	new_sort = "created_at-asc" if options[:sort].present? && options[:sort] == "created_at-desc"

	options_without_sort = options.reject{|k,v| k.to_s == 'sort'}

-%>

<div class="row" style="margin-bottom: 1em">
	<div class="col-md-5 col-sm-2 col-xs-2">
		<%= link_to audit_search_path(params: options, format: :xlsx), class: 'btn btn-sm btn-info' do -%>
			<i class="hidden-lg hidden-md fa fa-download"></i><span class="hidden-sm hidden-xs"> Download</span>
		<% end -%>
	</div>
	<div class="col-md-7 col-sm-10 col-xs-10">
		<%- if page > 1 || more_pages -%>
		<div class="btn-toolbar pull-right" role="toolbar">
			<div class="btn-group" role="group">			
				<button 
					class="btn btn-standard btn-sm btn-default" 
					type="button"
					<%= page <= 1 ? 'disabled="disabled"'.html_safe : nil -%>
					onclick="window.location = '<%= audit_search_path(options_without_page.merge({page: 1})) -%>'">
					I<i class="fa fa-chevron-left"></i>
					<span class="hidden-sm hidden-xs">First</span>					
				</button>
				<button 
					class="btn btn-standard btn-sm btn-default" 
					type="button"
					<%= page <= 1 ? 'disabled="disabled"'.html_safe : nil -%>
					onclick="window.location = '<%= audit_search_path(options_without_page.merge({page: page-1})) -%>'">
					<i class="fa fa-chevron-left"></i>
					<span class="hidden-sm hidden-xs">Back</span>					
				</button>
				<button 
					class="btn btn-standard btn-sm btn-default" 
					type="button"
					<%= !more_pages ? 'disabled="disabled"'.html_safe : nil -%>
					onclick="window.location = '<%= audit_search_path(options_without_page.merge({page: page+1})) -%>'">
					<span class="hidden-sm hidden-xs">Next</span>
					<i class="fa fa-chevron-right"></i>					
				</button>
				<button 
					class="btn btn-standard btn-sm btn-default" 
					type="button"
					<%= !more_pages ? 'disabled="disabled"'.html_safe : nil -%>
					onclick="window.location = '<%= audit_search_path(options_without_page.merge({page: last_page})) -%>'">
					<span class="hidden-sm hidden-xs">Last </span>
					<i class="fa fa-chevron-right"></i>I				
				</button>
			</div>
		</div>
		<% end -%>
	</div>		
</div>

<%= form_tag audit_search_path, method: :get -%>
<%- options_without_page.reject{ |k,v| k.to_s.index("_") == 0 }.each do |k,v| -%>
<%- # HTML tags are used instead of hidden_field_tag so we can avoid the form helper from writing IDs that may coflict with other elements in the page -%>
	<input type="hidden" name="<%= k.to_s -%>" value="<%= v.to_s -%>" />
<% end -%>
	<div class="table-responsive">
		<table class="table table-condensed table-striped">
		<%- if defined?(caption) -%>
			<caption class="h3"><%= caption -%></caption>
		<% end -%>
			<thead>
				<tr>
					<td style="border-top: 2px solid #000;border-bottom: 2px solid #000;width: 2%"></td>
					<th scope="col" style="border-top: 2px solid #000;width: 15%">
						<%= link_to audit_search_path(options_without_sort.merge({sort: new_sort, page: 1})) do -%>
							Date <i class="fa fa-caret-<%= (!options[:sort].present? || options[:sort].index("-asc").nil? ? "down" : "up") %>"></i>
						<% end -%>

					</th>
					<th scope="col" style="border-top: 2px solid #000;width: 35%">
						Store
					</th>
					<th scope="col" class="hidden-xs" style="border-top: 2px solid #000;width: 20%">
						<%= select_tag :_auditor, options_for_select(audits[:aggs][:auditors].collect{ |p| p[:name]}, options[:_auditor]), prompt: "All Auditors", class: "form-control input-sm", onchange: "this.form.submit()" -%>
					</th>
					<th scope="col" style="border-top: 2px solid #000;width: 23%" class="text-center">
						<%= select_tag :_score_range, options_for_select(audits[:aggs][:score_ranges].collect{ |p| [p[:name], [p[:from], p[:to]]]}, options[:_score_range]), prompt: "All Scores", class: "form-control input-sm", onchange: "this.form.submit()" -%>
					</th>
				</tr>
			</thead>
			<%- if audits_list.size > 0 -%>
			<tfoot>
				<tr class="active">
					<td colspan="5" style="border-top:1px solid #ccc; padding: 0.7em">
						<ul class="list-unstyled list-inline">
							<li class="col-md-5 col-sm-12 col-xs-12">
								<i class="fa fa-warning text-danger"></i>
								- Audit has unresolved issues
							</li>
						</ul>
					</td>
				</tr>
			</tfoot>
			<tbody>	
			<%- audits_list.each do |audit| -%>
			<%-
				# This is done to accomodate for search from either the 
				# database or from ES
				audit_store = audit[:store] || audit.store
			-%>
				<tr>
					<td>
						<%- if audit.images.size > 0  -%>
						
						<i class="fa fa-sm fa-camera js-ImageGallery" style="cursor: pointer"></i>
						<div class="audit-image-gallery" style="display: none">
							<%- audit.images.each do |image| -%>							<a href="<%=image[:content_url]-%>" data-size="<%=Image.dimensions(image[:content_url])-%>" >
								
									<figcaption>
										Pictures of audit from <%= audit[:created_at].to_date.strftime('%m/%d/%Y') -%> for <%= audit_store.full_name-%>
									</figcaption>

								</a>		
							<%- end -%>
						</div>
						<%- end -%>
					</td>
					<td><%= audit[:created_at].to_date.strftime("%b %d" + (audit[:created_at].to_date.year != Date.today.year ? ", %Y" : "")) -%></td>
					<td>
						<%= link_to audit_store.full_name, audit_path( audit[:id] ) -%>
					</td>
					<td class="hidden-xs"><%= audit[:auditor_name] -%></td>
					<td class="text-center">
						<%= audit.score[:total]-%>
						<%- if audit[:has_unresolved_issues] -%>
							<i class="fa fa-warning text-danger" title="This audit has some unresolved issues"></i>
						<% end -%>
					</td>
				</tr>
			<% end -%>
			<%- else -%>
				<tr>
					<td colspan="5" class="text-center">
						<p><em>
							<%= defined?(message_noRecords) ? message_noRecords : "No audits found" -%>
						</em></p>
					</td>
				</tr>
			<%- end -%>
			</tbody>
		</table>
	</div>
</form>
<div id="gallery" class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="pswp__bg"></div>

	<div class="pswp__scroll-wrap">

		<div class="pswp__container">
		<div class="pswp__item"></div>
		<div class="pswp__item"></div>
		<div class="pswp__item"></div>
		</div>

		<div class="pswp__ui pswp__ui--hidden">

		<div class="pswp__top-bar">

			<div class="pswp__counter"></div>

			<button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

			<button class="pswp__button pswp__button--share" title="Share"></button>

			<button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

			<button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

			<div class="pswp__preloader">
				<div class="pswp__preloader__icn">
					<div class="pswp__preloader__cut">
					<div class="pswp__preloader__donut"></div>
					</div>
				</div>
			</div>
		</div>

		<!-- <div class="pswp__loading-indicator"><div class="pswp__loading-indicator__line"></div></div> -->

		<div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
			<div class="pswp__share-tooltip">
				<!-- <a href="#" class="pswp__share--facebook"></a>
				<a href="#" class="pswp__share--twitter"></a>
				<a href="#" class="pswp__share--pinterest"></a>
				<a href="#" download class="pswp__share--download"></a> -->
			</div>
		</div>

		<button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
		<button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>
		<div class="pswp__caption">
			<div class="pswp__caption__center">
			</div>
		</div>
		</div>
	</div>
</div>
<%- content_for :head do -%>
	<%= stylesheet_link_tag "sweet-alert.css" -%>
	<%= stylesheet_link_tag "photoswipe.css" -%>
	<%= stylesheet_link_tag "default-skin/photoswipe_default_ui.css" -%>
<%- end -%>

<%- content_for :page_js do -%>
	<%= javascript_include_tag "photoswipe.min.js" -%>
	<%= javascript_include_tag "photoswipe_default_ui.min.js" -%>
	<script type="text/javascript">
	    (function() {
			var initPhotoSwipeFromDOM = function(gallerySelector) {
				var parseThumbnailElements = function(el) {
				    var thumbElements = el.childNodes,
				        numNodes = thumbElements.length,
				        items = [],
				        el,
				        childElements,
				        thumbnailEl,
				        size,
				        item;
				    for(var i = 0; i < numNodes; i++) {
				        el = thumbElements[i];
				        // include only element nodes 
				        if(el.nodeType !== 1) {
				          continue;
				        }
				        childElements = el.children;
				        size = el.getAttribute('data-size').split('x');
				        // create slide object
				        item = {
							src: el.getAttribute('href'),
							w: parseInt(size[0], 10),
							h: parseInt(size[1], 10),
							author: el.getAttribute('data-author')
				        };
				        item.el = el; // save link to element for getThumbBoundsFn
				        if(childElements.length > 0) {
				          item.msrc = childElements[0].getAttribute('src'); // thumbnail url
				          if(childElements.length > 1) {
				              item.title = childElements[1].innerHTML; // caption (contents of figure)
				          }
				        }
						var mediumSrc = el.getAttribute('data-med');
			          	if(mediumSrc) {
			            	size = el.getAttribute('data-med-size').split('x');
			            	// "medium-sized" image
			            	item.m = {
			              		src: mediumSrc,
			              		w: parseInt(size[0], 10),
			              		h: parseInt(size[1], 10)
			            	};
			          	}
			          	// original image
			          	item.o = {
			          		src: item.src,
			          		w: item.w,
			          		h: item.h
			          	};
				        items.push(item);
				    }
				    return items;
				};
				// find nearest parent element
				var closest = function closest(el, fn) {
				    return el && ( fn(el) ? el : closest(el.parentNode, fn) );
				};
				var onThumbnailsClick = function(e) {
				    e = e || window.event;
				    e.preventDefault ? e.preventDefault() : e.returnValue = false;
				    var eTarget = e.target || e.srcElement;
				    var clickedListItem = closest(eTarget, function(el) {
				        return el.tagName === 'A';
				    });
				    if(!clickedListItem) {
				        return;
				    }
				    var clickedGallery = clickedListItem.parentNode;
				    var childNodes = clickedListItem.parentNode.childNodes,
				        numChildNodes = childNodes.length,
				        nodeIndex = 0,
				        index;
				    for (var i = 0; i < numChildNodes; i++) {
				        if(childNodes[i].nodeType !== 1) { 
				            continue; 
				        }
				        if(childNodes[i] === clickedListItem) {
				            index = nodeIndex;
				            break;
				        }
				        nodeIndex++;
				    }
				    if(index >= 0) {
				        openPhotoSwipe( index, clickedGallery );
				    }
				    return false;
				};
				var photoswipeParseHash = function() {
					var hash = window.location.hash.substring(1),
				    params = {};
				    if(hash.length < 5) { // pid=1
				        return params;
				    }
				    var vars = hash.split('&');
				    for (var i = 0; i < vars.length; i++) {
				        if(!vars[i]) {
				            continue;
				        }
				        var pair = vars[i].split('=');  
				        if(pair.length < 2) {
				            continue;
				        }           
				        params[pair[0]] = pair[1];
				    }
				    if(params.gid) {
				    	params.gid = parseInt(params.gid, 10);
				    }
				    return params;
				};
				var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {
				    var pswpElement = document.querySelectorAll('.pswp')[0],
				        gallery,
				        options,
				        items;
					items = parseThumbnailElements(galleryElement);
				    // define options (if needed)
				    options = {
				        galleryUID: galleryElement.getAttribute('data-pswp-uid'),
				        getThumbBoundsFn: function(index) {
				            // See Options->getThumbBoundsFn section of docs for more info
				            var thumbnail = items[index].el.children[0],
				                pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
				                rect = thumbnail.getBoundingClientRect(); 
				            return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};
				        },
				        addCaptionHTMLFn: function(item, captionEl, isFake) {
							if(!item.title) {
								captionEl.children[0].innerText = '';
								return false;
							}
							captionEl.children[0].innerHTML = item.title +  '<br/><small>Photo: ' + item.author + '</small>';
							return true;
				        }
						
				    };
				    if(fromURL) {
				    	if(options.galleryPIDs) {
				    		// parse real index when custom PIDs are used 
				    		// http://photoswipe.com/documentation/faq.html#custom-pid-in-url
				    		for(var j = 0; j < items.length; j++) {
				    			if(items[j].pid == index) {
				    				options.index = j;
				    				break;
				    			}
				    		}
					    } else {
					    	options.index = parseInt(index, 10) - 1;
					    }
				    } else {
				    	options.index = parseInt(index, 10);
				    }
				    // exit if index not found
				    if( isNaN(options.index) ) {
				    	return;
				    }
					var radios = document.getElementsByName('gallery-style');
					for (var i = 0, length = radios.length; i < length; i++) {
					    if (radios[i].checked) {
					        if(radios[i].id == 'radio-all-controls') {
					        } else if(radios[i].id == 'radio-minimal-black') {
					        	options.mainClass = 'pswp--minimal--dark';
						        options.barsSize = {top:0,bottom:0};
								options.captionEl = false;
								options.fullscreenEl = false;
								options.shareEl = false;
								options.bgOpacity = 0.85;
								options.tapToClose = true;
								options.tapToToggleControls = false;
					        }
					        break;
					    }
					}
				    if(disableAnimation) {
				        options.showAnimationDuration = 0;
				    }
				    options.shareButtons = [
	    				{id:'download', label:'Download image', url:'{{raw_image_url}}', download:true}];

				    // Pass data to PhotoSwipe and initialize it
				    gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
				    // see: http://photoswipe.com/documentation/responsive-images.html
					var realViewportWidth,
					    useLargeImages = false,
					    firstResize = true,
					    imageSrcWillChange;
					gallery.listen('beforeResize', function() {
						var dpiRatio = window.devicePixelRatio ? window.devicePixelRatio : 1;
						dpiRatio = Math.min(dpiRatio, 2.5);
					    realViewportWidth = gallery.viewportSize.x * dpiRatio;
					    if(realViewportWidth >= 1200 || (!gallery.likelyTouchDevice && realViewportWidth > 800) || screen.width > 1200 ) {
					    	if(!useLargeImages) {
					    		useLargeImages = true;
					        	imageSrcWillChange = true;
					    	}
					        
					    } else {
					    	if(useLargeImages) {
					    		useLargeImages = false;
					        	imageSrcWillChange = true;
					    	}
					    }
					    if(imageSrcWillChange && !firstResize) {
					        gallery.invalidateCurrItems();
					    }
					    if(firstResize) {
					        firstResize = false;
					    }
					    imageSrcWillChange = false;
					});
					gallery.listen('gettingData', function(index, item) {
					    if( true || useLargeImages ) {
					        item.src = item.o.src;
					        item.w = item.o.w;
					        item.h = item.o.h;
					    } else {
					        item.src = item.m.src;
					        item.w = item.m.w;
					        item.h = item.m.h;
					    }
					});
				    gallery.init();
				};
				// select all gallery elements
				var galleryElements = document.querySelectorAll( gallerySelector );
				for(var i = 0, l = galleryElements.length; i < l; i++) {
					galleryElements[i].setAttribute('data-pswp-uid', i+1);
					galleryElements[i].onclick = onThumbnailsClick;
				}
				// Parse URL and open gallery if it contains #&pid=3&gid=1
				var hashData = photoswipeParseHash();
				if(hashData.pid && hashData.gid) {
					openPhotoSwipe( hashData.pid,  galleryElements[ hashData.gid - 1 ], true, true );
				}
			};
			initPhotoSwipeFromDOM('.audit-image-gallery');
		})();
	$(document).ready(function() {
		$("i.js-ImageGallery").bind({
			"click": function(event){
				var correspondingImageGallery = $(this).next("div.audit-image-gallery");
				console.log($("a:first", correspondingImageGallery));
				$("a:first", correspondingImageGallery).trigger("click");
			}
		});
	});
	</script>

<%- end -%>